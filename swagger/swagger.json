{
  "swagger": "2.0",
  "info": {
    "version": "V1",
    "title": "Swagger_Test",
    "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia.",
    "x-swagger-net-version": "8.3.13.403"
  },
  "host": "swagger-net-test.azurewebsites.net",
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/ApiExplorer": {
      "get": {
        "tags": [
          "ApiExplorer"
        ],
        "summary": "Testing the summary on the ApiExplorerController",
        "description": "Testing the description on the ApiExplorerController\r\nThis is a second line\r\nHere is a link to <a href=\"https://github.com/heldersepu\">my GitHub profile</a><br />\r\nSome HTML styling: <b>BOLD</b><i>italics</i><ul><li>Item one</li><li>Item two</li></ul><pre>Text in a pre element</pre><h1>Header1</h1><h2>Header2</h2><h3>Header3</h3>",
        "operationId": "ApiExplorer_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ApiExplorer"
        ],
        "operationId": "ApiExplorer_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScopeResponseModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScopeResponseModel"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/list_string": {
      "get": {
        "tags": [
          "ArrayTest"
        ],
        "summary": "Get1 ##Get1",
        "description": "Testing Markdown\r\n*Italic*\r\n**Bold**\r\n# Heading 1\r\n## Heading 2\r\n[Link](http://a.com)\r\n* List abc\r\n* List def\r\n* List ghi\r\n            \r\n&gt; Blockquote\r\n`Inline code` with backticks\r\nHorizontal Rule\r\n---\r\nBlock1 Line1\r\nBlock1 Line2\r\n            \r\nBlock2 Line1\r\nBlock2 Line2",
        "operationId": "ArrayTest_Get1",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "p",
            "in": "query",
            "required": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/list_int": {
      "get": {
        "tags": [
          "ArrayTest"
        ],
        "summary": "Get2 `Get2`",
        "description": "HelloWorld\r\n<pre>{\r\n    \"demo\": \"val\",\r\n    \"demo2\": \"hello\"\r\n}</pre>",
        "operationId": "ArrayTest_Get2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "p",
            "in": "query",
            "required": true,
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/list_location": {
      "get": {
        "tags": [
          "ArrayTest"
        ],
        "summary": "Get3 **Get3**",
        "description": "<a href=\"#Int64Post\">See also the Int64 Post</a>\r\n<a href=\"#/IntParam/IntParam_Get\">See also the IntParam Get</a>",
        "operationId": "ArrayTest_Get3",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "p",
            "in": "query",
            "required": true,
            "items": {},
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Location"
              },
              "xml": {
                "name": "Location",
                "wrapped": true
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/Arrays": {
      "get": {
        "tags": [
          "ArrayTest"
        ],
        "summary": "This endpoint will no longer be supported. Use /api/somepath instead",
        "operationId": "ArrayTest_Get4",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Arrays"
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/Post Arrays": {
      "post": {
        "tags": [
          "ArrayTest"
        ],
        "operationId": "ArrayTest_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "arrays",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Arrays"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Arrays"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ArrayTest/Test#Hash": {
      "put": {
        "tags": [
          "ArrayTest"
        ],
        "summary": "Put",
        "description": "### This is a list\r\n- Item one\r\n- Item 2\r\n  - Sub item 1\r\n  - Sub item 2\r\n- Item 3",
        "operationId": "ArrayTest_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "arrays",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Arrays"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Arrays"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Async": {
      "get": {
        "tags": [
          "Async"
        ],
        "operationId": "Async_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Async"
        ],
        "operationId": "Async_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Async/MyService/{myParameter}": {
      "get": {
        "tags": [
          "Async"
        ],
        "operationId": "Async_GetAsyncMyServiceByMyParameter",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "myParameter",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Async/{id}": {
      "put": {
        "tags": [
          "Async"
        ],
        "operationId": "Async_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Async"
        ],
        "operationId": "Async_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/attrib/{payId}": {
      "get": {
        "tags": [
          "Attribute"
        ],
        "operationId": "Attribute_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "payId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 123
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/attrib/data": {
      "get": {
        "tags": [
          "Attribute"
        ],
        "operationId": "Attribute_GetAttribData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data.integ",
            "in": "query",
            "description": "Sample integer",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.doub",
            "in": "query",
            "description": "Sample double",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "data.boolea",
            "in": "query",
            "description": "Sample boolean",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "data.guid",
            "in": "query",
            "description": "Sample guid",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data.date",
            "in": "query",
            "description": "Sample DateTime",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Data"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/attrib/{name}": {
      "post": {
        "tags": [
          "Attribute"
        ],
        "operationId": "Attribute_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Data"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/BigString": {
      "get": {
        "tags": [
          "BigString"
        ],
        "description": "<h2>Testing html table</h2>\r\n<table border=\"1\">\r\n  <tr>\r\n    <td colspan=\"3\">\r\n      <span class=\"method\">ONE</span>\r\n    </td>\r\n  </tr>\r\n  <tr>\r\n    <td>ABC11</td>\r\n    <td>ABC22</td>\r\n    <td>ABC33</td>\r\n  </tr>\r\n</table>\r\n<img src=\"https://yuml.me/diagram/class/%5BSupplier%7Bbg:orange%7D%5D,%5BSupplier%5D-0..1%3E%5BAddress%5D,%5BSupplier%5D\" />\r\n<img src=\"data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==\" alt=\"Red dot\" />",
        "operationId": "BigString_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 10000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/BigSwag/{id}": {
      "get": {
        "tags": [
          "BigSwag"
        ],
        "operationId": "BigSwag_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/bind/{id}": {
      "post": {
        "tags": [
          "Binding"
        ],
        "operationId": "Binding_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Blob": {
      "get": {
        "tags": [
          "Blob"
        ],
        "summary": "Get a Bad Blob",
        "operationId": "Blob_GetBad",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Blob"
        ],
        "summary": "Template object test",
        "operationId": "Blob_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnotherFoo[Foo]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Blob"
        ],
        "summary": "Get an Ok Blob",
        "operationId": "Blob_PostOk",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ChildApi": {
      "get": {
        "tags": [
          "ChildApi"
        ],
        "operationId": "GetData",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Data"
              },
              "xml": {
                "name": "Data",
                "wrapped": true
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Company/Get2": {
      "get": {
        "tags": [
          "Company"
        ],
        "operationId": "Company_Get2",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "c.id",
            "in": "query",
            "description": "The Unique Company ID",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 456
          },
          {
            "name": "c.name",
            "in": "query",
            "description": "The Company Name",
            "required": false,
            "type": "string",
            "default": "My Company"
          },
          {
            "name": "c.description",
            "in": "query",
            "description": "An optional description of the company",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.taxCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.taxCodeDisplayName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.allOf",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.properties.aaa",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.properties.bbb",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.lowercase",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.uPPERCASE",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "c.huNGariAnCASE",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Company": {
      "get": {
        "tags": [
          "Company"
        ],
        "description": "## TESTING MARKDOWN TABLES\r\n### start table\r\n            \r\n| Tables        | Are           | Cool  |\r\n| ------------- |:-------------:| -----:|\r\n| col 3 is      | right-aligned | $1600 |\r\n| col 2 is      | centered      |   $12 |\r\n| zebra stripes | are neat      |    $1 |\r\n            \r\n### end table",
        "operationId": "Company_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "## MARKDOWN DoubleHash \n### MARKDOWN TripleHash \n`MARKDOWN code` \n ## TESTING MARKDOWN TABLES\r\n### start table\r\n            \r\n| Tables        | Are           | Cool  |\r\n| ------------- |:-------------:| -----:|\r\n| col 3 is      | right-aligned | $1600 |\r\n| col 2 is      | centered      |   $12 |\r\n| zebra stripes | are neat      |    $1 |\r\n            \r\n### end table",
            "schema": {
              "$ref": "#/definitions/Company123"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Company"
        ],
        "operationId": "Company_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "companies",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Company"
              },
              "xml": {
                "name": "Company",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Company"
        ],
        "description": "foo | bar\r\n----|----\r\nbaz | qux &#x7c; quux",
        "operationId": "Company_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "companies",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Company"
              },
              "xml": {
                "name": "Company",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ComplexRequest": {
      "get": {
        "tags": [
          "ComplexRequest"
        ],
        "operationId": "ComplexRequest_Get",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "obj.person.description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "obj.person.entityName.firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "obj.person.entityName.lastName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EntityRequest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/CountingLock/Get1": {
      "get": {
        "tags": [
          "CountingLock"
        ],
        "operationId": "CountingLock_Get1",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "c1.employeeID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "c1.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingLock1"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/CountingLock/Get2": {
      "get": {
        "tags": [
          "CountingLock"
        ],
        "operationId": "CountingLock_Get2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "c2.employeeID",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "c2.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CountingLock2"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/CustomEnumerable": {
      "get": {
        "tags": [
          "CustomEnumerable"
        ],
        "operationId": "CustomEnumerable_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Default": {
      "get": {
        "tags": [
          "Default"
        ],
        "operationId": "Default_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Default"
        ],
        "operationId": "Default_Put",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserWriteModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Default"
        ],
        "operationId": "Default_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "dayOffRule",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "None",
              "OffAfter",
              "OffBefore",
              "InAfter"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyValuePair[Int32,ShiftDayOffRule]"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Default/{id}": {
      "get": {
        "tags": [
          "Default"
        ],
        "operationId": "Default_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Default"
        ],
        "operationId": "Default_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Definitions": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "operationId": "Definitions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CurrentTask"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Dictionary": {
      "get": {
        "tags": [
          "Dictionary"
        ],
        "operationId": "Dictionary_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dictionary"
        ],
        "operationId": "Dictionary_PutEcho",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Test"
              },
              "xml": {
                "name": "Test",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Dictionary"
        ],
        "operationId": "Dictionary_PostEcho",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Test"
              },
              "xml": {
                "name": "Test",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Test"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Dictionary"
        ],
        "operationId": "Dictionary_DeleteEcho",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "guids",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string",
                "format": "uuid"
              },
              "example": [
                "00000000-0000-0000-0000-000000000000",
                "00000000-0000-0000-0000-000000000000"
              ],
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "example": "00000000-0000-0000-0000-000000000000",
                "type": "string",
                "format": "uuid"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Dictionary"
        ],
        "operationId": "Dictionary_PatchEcho",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "values",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "xml": {
                "name": "Dictionary`2",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "xml": {
                "name": "Dictionary`2",
                "wrapped": true
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/EnumTest": {
      "get": {
        "tags": [
          "EnumTest"
        ],
        "operationId": "EnumTest_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "rule",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "None",
              "OffAfter",
              "OffBefore",
              "InAfter"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "example": {
                "None": 0,
                "OffAfter": 1,
                "InAfter": 3,
                "OffBefore": -1
              },
              "type": "string",
              "enum": [
                "None",
                "OffAfter",
                "OffBefore",
                "InAfter"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromBody/Test1_WithFromBody": {
      "get": {
        "tags": [
          "FromBody"
        ],
        "operationId": "FromBody_GetWith",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "v.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromBody/Test2_NoFromBody": {
      "get": {
        "tags": [
          "FromBody"
        ],
        "operationId": "FromBody_GetWithout",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "v.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromBody": {
      "post": {
        "tags": [
          "FromBody"
        ],
        "operationId": "FromBody_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromUri/Test0_WithFromUri": {
      "get": {
        "tags": [
          "FromUri"
        ],
        "operationId": "FromUri_GetWith0",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "a.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "a.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "a.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "a.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "a.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "a.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          },
          {
            "name": "b.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "b.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "b.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "b.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "b.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "b.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromUri/Test1_WithFromUri": {
      "get": {
        "tags": [
          "FromUri"
        ],
        "operationId": "FromUri_GetWith",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "v.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromUri/Test2_NoFromUri": {
      "get": {
        "tags": [
          "FromUri"
        ],
        "operationId": "FromUri_GetWithout",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "v.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "v.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/FromUri": {
      "post": {
        "tags": [
          "FromUri"
        ],
        "operationId": "FromUri_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "v",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/HtmlExample": {
      "get": {
        "tags": [
          "HtmlExample"
        ],
        "operationId": "HtmlExample_Get",
        "consumes": [],
        "produces": [
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {
              "text/html": "\n            <!DOCTYPE html>\n            <html>\n                <head></head>\n                <body>\n                    <h1>hello</h1>\n                </body>\n            </html>"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/HugeResponse": {
      "get": {
        "tags": [
          "HugeResponse"
        ],
        "operationId": "HugeResponse_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 100000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/IActionResult": {
      "get": {
        "tags": [
          "IActionResult"
        ],
        "operationId": "IActionResult_GetListStuff",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "foo",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "auditId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "IActionResult"
        ],
        "operationId": "IActionResult_PostListStuff",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "foo",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "auditId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/IHttpActionResult": {
      "get": {
        "tags": [
          "IHttpActionResult"
        ],
        "operationId": "IHttpActionResult_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "IHttpActionResult"
        ],
        "operationId": "IHttpActionResult_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MyData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFoundResult"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/IHttpActionResult/{id}": {
      "get": {
        "tags": [
          "IHttpActionResult"
        ],
        "operationId": "IHttpActionResult_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-example": "123456",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "BadRequest",
            "schema": {
              "$ref": "#/definitions/BadRequestErrorMessageResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedResult"
            }
          },
          "404": {
            "description": "NotFound",
            "schema": {
              "$ref": "#/definitions/NotFoundResult"
            }
          },
          "500": {
            "description": "InternalServerError",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResult"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image": {
      "get": {
        "tags": [
          "Image"
        ],
        "operationId": "Image_Get",
        "consumes": [],
        "produces": [
          "image/png"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Image"
        ],
        "operationId": "Image_Put",
        "consumes": [],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Download an image",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Image"
        ],
        "operationId": "Image_Post",
        "consumes": [],
        "produces": [
          "image/png"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Image"
        ],
        "operationId": "Image_Patch",
        "consumes": [],
        "produces": [
          "image/svg"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "image.svg"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ImportArray": {
      "post": {
        "tags": [
          "ImportArray"
        ],
        "operationId": "ImportArray_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Account"
              },
              "xml": {
                "name": "Account",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/InheritanceTest": {
      "get": {
        "tags": [
          "InheritanceTest"
        ],
        "operationId": "InheritanceTest_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "imageFeature.imageUrl",
            "in": "query",
            "description": "Here goes your image URL",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageFeature.title",
            "in": "query",
            "description": "We all need a Title",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageFeature"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "InheritanceTest"
        ],
        "operationId": "InheritanceTest_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "imageFeature",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImageFeature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ImageFeature"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Int64": {
      "get": {
        "tags": [
          "Int64"
        ],
        "operationId": "Int64_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Int64Data"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Int64"
        ],
        "description": "<h2>\r\n  <a name=\"Int64Post\">Int64 Post</a>\r\n</h2>",
        "operationId": "Int64_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Int64Data"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Int64Data"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/IntParam": {
      "get": {
        "tags": [
          "IntParam"
        ],
        "operationId": "IntParam_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data.name",
            "in": "query",
            "description": "Payload Name",
            "required": false,
            "type": "string"
          },
          {
            "name": "data.timeout",
            "in": "query",
            "description": "Timeout in ms (Range 15000 to 60000. Default set to 50000)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 50000,
            "maximum": 60000,
            "minimum": 15000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Payload"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Location/Get1": {
      "get": {
        "tags": [
          "Location"
        ],
        "operationId": "Location_Get1",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x.countryName",
            "in": "query",
            "description": "Country name of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.city",
            "in": "query",
            "description": "City of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.regionCode",
            "in": "query",
            "description": "State/region code of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.regionName",
            "in": "query",
            "description": "State/region of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.zipCode",
            "in": "query",
            "description": "Zip or postal code of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.timezoneStandardName",
            "in": "query",
            "description": "Timezone of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.latitude",
            "in": "query",
            "description": "Latitude of IP address",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "x.longitude",
            "in": "query",
            "description": "Longitude of IP address",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "x.bigErrorMargin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "maximum": 110.99,
            "minimum": 10.1
          },
          {
            "name": "x.countryCode",
            "in": "query",
            "description": "Two-letter country code of IP address",
            "required": false,
            "type": "string"
          },
          {
            "name": "x.errorMargin",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "maximum": 0.99,
            "minimum": 0.1
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GeolocateResponse"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Location/Get2": {
      "get": {
        "tags": [
          "Location"
        ],
        "operationId": "Location_Get2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x.lat",
            "in": "query",
            "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 90,
            "minimum": -90
          },
          {
            "name": "x.lon",
            "in": "query",
            "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 180,
            "minimum": -180
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Location/Get3": {
      "get": {
        "tags": [
          "Location"
        ],
        "operationId": "Location_Get3",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x.point1.lat",
            "in": "query",
            "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 90,
            "minimum": -90
          },
          {
            "name": "x.point1.lon",
            "in": "query",
            "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 180,
            "minimum": -180
          },
          {
            "name": "x.point2.lat",
            "in": "query",
            "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 90,
            "minimum": -90
          },
          {
            "name": "x.point2.lon",
            "in": "query",
            "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 180,
            "minimum": -180
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SomeRequest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Location/Get4": {
      "get": {
        "tags": [
          "Location"
        ],
        "operationId": "Location_Get4",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x.elev",
            "in": "query",
            "description": "**Elevation**: is the height above or below a fixed reference point.",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "x.lat",
            "in": "query",
            "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 90,
            "minimum": -90
          },
          {
            "name": "x.lon",
            "in": "query",
            "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
            "required": false,
            "type": "number",
            "format": "float",
            "maximum": 180,
            "minimum": -180
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Coordinate"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Log": {
      "get": {
        "tags": [
          "Log"
        ],
        "operationId": "Log_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MemoryBarrier": {
      "get": {
        "tags": [
          "MemoryBarrier"
        ],
        "operationId": "MemoryBarrier_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MonthTest/{Id}": {
      "get": {
        "tags": [
          "MonthTest"
        ],
        "operationId": "MonthTest_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.month",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MData"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MonthTest": {
      "put": {
        "tags": [
          "MonthTest"
        ],
        "operationId": "MonthTest_Put",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "MonthTest"
        ],
        "operationId": "MonthTest_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MonthTest"
        ],
        "operationId": "MonthTest_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MultiGet": {
      "get": {
        "tags": [
          "MultiGet"
        ],
        "operationId": "MultiGet_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "bId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MultiGet/ByList": {
      "get": {
        "tags": [
          "MultiGet"
        ],
        "operationId": "MultiGet_GetByList",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "cIds",
            "in": "query",
            "required": true,
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MultiGet/ByIList": {
      "get": {
        "tags": [
          "MultiGet"
        ],
        "operationId": "MultiGet_GetByIList",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "cIds",
            "in": "query",
            "required": true,
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/MultiGet/ByIdAndList": {
      "get": {
        "tags": [
          "MultiGet"
        ],
        "operationId": "MultiGet_GetByIdAndList",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "bId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "cIds",
            "in": "query",
            "required": true,
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/MultiParamPost/{id}": {
      "post": {
        "tags": [
          "MultiParamPost"
        ],
        "operationId": "MultiParamPost_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "companies",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Company"
              },
              "xml": {
                "name": "Company",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/NestedEnum": {
      "put": {
        "tags": [
          "NestedEnum"
        ],
        "summary": "A nullable enum test",
        "operationId": "NestedEnum_PutEnumNull",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Lunedi",
              "Martedi",
              "Venerdi"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "NestedEnum"
        ],
        "summary": "A non-null enum test",
        "operationId": "NestedEnum_DeleteEnumNonNull",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Lunedi",
              "Martedi",
              "Venerdi"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/NestedSwag/{id}": {
      "get": {
        "tags": [
          "NestedSwag"
        ],
        "operationId": "NestedSwag_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/NewUser": {
      "get": {
        "tags": [
          "NewUser"
        ],
        "operationId": "NewUser_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data.uid",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data.email",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 250,
            "minLength": 5,
            "pattern": "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
          },
          {
            "name": "data.name",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 250
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewUserWriteModel"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "NewUser"
        ],
        "operationId": "NewUser_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUserWriteModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NewUserWriteModel"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route1/{date}": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate1",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route2/{date}": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate2",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route3": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate3",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route4": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate4",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data.date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route5/{date}": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate5",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/NodaTime/my/route6": {
      "get": {
        "tags": [
          "NodaTime"
        ],
        "operationId": "NodaTime_GetByDate6",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/NumCalc": {
      "get": {
        "tags": [
          "NumCalc"
        ],
        "operationId": "NumCalc_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 1000000
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/OAuth": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "operationId": "OAuth_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/OAuth/{id}": {
      "get": {
        "tags": [
          "OAuth"
        ],
        "operationId": "OAuth_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/PagedList": {
      "get": {
        "tags": [
          "PagedList"
        ],
        "operationId": "PagedList_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Company"
              },
              "xml": {
                "name": "Company",
                "wrapped": true
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/PagedList/{id}": {
      "get": {
        "tags": [
          "PagedList"
        ],
        "operationId": "PagedList_GetApiPagedListById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/Company"
              },
              "xml": {
                "name": "Company",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<p>Hello</p><p>World</p>",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/upc-a": {
      "post": {
        "tags": [
          "PngImage"
        ],
        "operationId": "PngImage_UPCA",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Image in image/png format"
          },
          "417": {
            "description": "Invalid UPC code."
          },
          "500": {
            "description": "Empty UPC code."
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/PngImage": {
      "post": {
        "tags": [
          "PngImage"
        ],
        "operationId": "PngImage_Post",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "image/png"
        ],
        "parameters": [
          {
            "name": "ImportImage",
            "in": "formData",
            "description": "Upload image file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/PolygonVolume": {
      "get": {
        "tags": [
          "PolygonVolume"
        ],
        "operationId": "PolygonVolume_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "p.points",
            "in": "query",
            "required": false,
            "items": {},
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "p.planId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolygonVolumeInsideParameter"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "PolygonVolume"
        ],
        "operationId": "PolygonVolume_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "p",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolygonVolumeInsideParameter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolygonVolumeInsideParameter"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/RecursiveParam": {
      "post": {
        "tags": [
          "RecursiveParam"
        ],
        "operationId": "RecursiveParam_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets": {
      "get": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/{id}": {
      "get": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/{id}/{name}": {
      "get": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_GetByIdByName",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_GetByIdByName",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/PostTest1": {
      "post": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_PostTest1",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/test1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/PostTest2": {
      "post": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_PostTest2",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/test2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/my/put2": {
      "put": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_Put2",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/foo/widgets/my/post2": {
      "post": {
        "tags": [
          "RoutePrefix"
        ],
        "operationId": "RoutePrefix_Post2",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BodyData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/faux/RoutePrefix/{id}": {
      "get": {
        "tags": [
          "Routes"
        ],
        "operationId": "Routes_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/faux/RoutePrefix/one": {
      "post": {
        "tags": [
          "Routes"
        ],
        "operationId": "Routes_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/faux/RoutePrefix/two": {
      "post": {
        "tags": [
          "Routes"
        ],
        "operationId": "Routes_PostFauxRoutePrefixTwo",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Routes": {
      "get": {
        "tags": [
          "Routes"
        ],
        "operationId": "Routes_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/RouteTest/test/{itemid}": {
      "get": {
        "tags": [
          "RouteTest"
        ],
        "operationId": "RouteTest_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "itemid",
            "in": "path",
            "description": "Secret ID for your object",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 123
          },
          {
            "name": "note",
            "in": "query",
            "description": "Notes about your object",
            "required": false,
            "type": "string",
            "default": "HelloWorld"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DTOv2"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/SvgImage": {
      "get": {
        "tags": [
          "SvgImage"
        ],
        "operationId": "SvgImage_Get",
        "consumes": [],
        "produces": [
          "image/svg+xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "image.svg"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "SvgImage"
        ],
        "operationId": "SvgImage_Post",
        "consumes": [],
        "produces": [
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "image.svg"
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestEnum": {
      "get": {
        "tags": [
          "TestEnum"
        ],
        "summary": "Simple GET echoing the given param",
        "operationId": "TestEnum_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "CustomEnum",
            "required": true,
            "type": "string",
            "enum": [
              "Text",
              "Numeric",
              "Date",
              "Numeric_Function",
              "Dropdown_List",
              "Checkbox"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "Text",
                "Numeric",
                "Date",
                "Numeric_Function",
                "Dropdown_List",
                "Checkbox"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestEnum"
        ],
        "summary": "Test POST lorem ipsum",
        "description": "<ul>\r\n  <li>\r\n    <b>Item 1</b> - description 1</li>\r\n  <li>\r\n    <b>Item 2</b> - description 2</li>\r\n</ul>",
        "operationId": "TestEnum_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "Text",
              "Numeric",
              "Date",
              "Numeric_Function",
              "Dropdown_List",
              "Checkbox"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string",
              "enum": [
                "Text",
                "Numeric",
                "Date",
                "Numeric_Function",
                "Dropdown_List",
                "Checkbox"
              ]
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestEnum/{Id}": {
      "put": {
        "tags": [
          "TestEnum"
        ],
        "summary": "Testing a [FromUri]",
        "operationId": "TestEnum_Put",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "viewModelTest.id",
            "in": "query",
            "description": "The super ID that will be used",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "viewModelTest.name",
            "in": "query",
            "description": "Who needs a name?",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewModelTest.abd",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewModelTest.xyz",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewModelTest.cde",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewModelTest.bcd",
            "in": "query",
            "required": false,
            "type": "string",
            "maxLength": 5,
            "minLength": 3
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ViewModelTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestMultiGet": {
      "get": {
        "tags": [
          "TestMultiGet"
        ],
        "operationId": "TestMultiGet_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestMultiGet/{id}": {
      "get": {
        "tags": [
          "TestMultiGet"
        ],
        "operationId": "TestMultiGet_GetApiTestMultiGetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestPost": {
      "get": {
        "tags": [
          "TestPost"
        ],
        "operationId": "TestPost_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 989898989898989898.0
          },
          {
            "name": "y",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double",
            "default": 1.0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestPost"
        ],
        "operationId": "TestPost_CreateTest",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "test",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MyTest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MyTest"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestStringEnum": {
      "get": {
        "tags": [
          "TestStringEnum"
        ],
        "operationId": "TestStringEnum_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "x",
            "in": "query",
            "required": true,
            "type": "string",
            "pattern": "^(uno|due)",
            "enum": [
              "uno",
              "due"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestStringEnum"
        ],
        "operationId": "TestStringEnum_Post",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "r.stringEnumColor",
            "in": "query",
            "required": false,
            "type": "string",
            "pattern": "^(dark-blue|dark-red|light-blue|light-red)",
            "enum": [
              "dark-blue",
              "dark-red",
              "light-blue",
              "light-red"
            ]
          },
          {
            "name": "r.transparency",
            "in": "query",
            "required": false,
            "type": "string",
            "pattern": "^(high|medium|low)",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          {
            "name": "r.name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Users": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "Users_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "users",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "xml": {
                "name": "User",
                "wrapped": true
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ValueProvider": {
      "get": {
        "tags": [
          "ValueProvider"
        ],
        "operationId": "ValueProvider_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "header",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ValueProvider"
        ],
        "operationId": "ValueProvider_Put",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "CID",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "101"
          },
          {
            "name": "QID",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "102"
          },
          {
            "name": "QID-V2",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "1022"
          },
          {
            "name": "Proxy-Authorization",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "103"
          },
          {
            "name": "Proxy_Authorization",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "1031"
          },
          {
            "name": "Proxy-CustomAuth",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "1032"
          },
          {
            "name": "Proxy-Test",
            "in": "header",
            "description": "",
            "required": true,
            "type": "string",
            "default": "1033"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ValueProvider"
        ],
        "operationId": "ValueProvider_Post",
        "consumes": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ValueTuple": {
      "get": {
        "tags": [
          "ValueTuple"
        ],
        "operationId": "ValueTuple_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/Fake/0/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get0",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/1/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/2/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/3/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/4/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get4",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/5/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get5",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/6/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get6",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/7/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get7",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/8/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get8",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Fake/9/{id}": {
      "get": {
        "tags": [
          "Fake"
        ],
        "operationId": "Fake_Get9",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Space Sample/0/{id}": {
      "get": {
        "tags": [
          "Space Sample"
        ],
        "operationId": "Space Sample_Get0",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Space Sample/1/{id}": {
      "get": {
        "tags": [
          "Space Sample"
        ],
        "operationId": "Space Sample_Get1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Hash#Sample/0/{id}": {
      "get": {
        "tags": [
          "Hash#Sample"
        ],
        "operationId": "Hash#Sample_Get0",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/Hash#Sample/1/{id}": {
      "get": {
        "tags": [
          "Hash#Sample"
        ],
        "operationId": "Hash#Sample_Get1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "default": 8
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ScopeResponseModel": {
      "properties": {
        "Id": {
          "description": "Id of the administrative scope.",
          "type": "string"
        },
        "Name": {
          "description": "Name of the administrative scope.",
          "type": "string"
        },
        "Description": {
          "description": "Description of the administrative scope.",
          "type": "string"
        },
        "IsBuiltIn": {
          "description": "Whether the administrative scope is built-in.",
          "type": "boolean"
        },
        "IsAllScope": {
          "description": "Indicates the built-in \"All\" scope.  There will be\r\nexactly one scope with this property set to true.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "ScopeResponseModel"
      },
      "type": "object"
    },
    "Location": {
      "description": "## Geographic coordinates\r\n___\r\nA **geographic coordinate system** is a coordinate system used in geography that enables every location on Earth",
      "properties": {
        "Lat": {
          "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
          "example": "25.85",
          "type": "number",
          "format": "float",
          "maximum": 90,
          "minimum": -90
        },
        "Lon": {
          "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
          "example": "-80.27",
          "type": "number",
          "format": "float",
          "maximum": 180,
          "minimum": -180
        }
      },
      "xml": {
        "name": "Location"
      },
      "type": "object"
    },
    "Arrays": {
      "properties": {
        "array1": {
          "description": "Test",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "array2": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "array3": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "array4": {
          "description": "List of Companies",
          "items": {
            "$ref": "#/definitions/Data"
          },
          "xml": {
            "name": "Data",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "Arrays"
      },
      "type": "object"
    },
    "Data": {
      "properties": {
        "integ": {
          "description": "Sample integer",
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "doub": {
          "description": "Sample double",
          "example": 9858.216,
          "type": "number",
          "format": "double"
        },
        "boolea": {
          "description": "Sample boolean",
          "type": "boolean"
        },
        "guid": {
          "description": "Sample guid",
          "example": "00000000-0000-0000-0000-000000000000",
          "type": "string",
          "format": "uuid"
        },
        "date": {
          "description": "Sample DateTime",
          "example": "2018-04-18",
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Data"
      },
      "type": "object"
    },
    "AnotherFoo[Foo]": {
      "properties": {},
      "xml": {
        "name": "AnotherFoo`1"
      },
      "type": "object"
    },
    "Company": {
      "properties": {
        "Id": {
          "description": "The Unique Company ID",
          "example": "123",
          "type": "integer",
          "format": "int32",
          "default": 456
        },
        "Name": {
          "description": "The Company Name",
          "example": "Acme co",
          "type": "string",
          "default": "My Company"
        },
        "Description": {
          "description": "An optional description of the company",
          "example": "Super duper company",
          "type": "string"
        },
        "TaxCode": {
          "example": "42rty",
          "type": "string"
        },
        "TaxCodeDisplayName": {
          "example": "Tax Code Display",
          "type": "string"
        },
        "allOf": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/Props"
        },
        "lowercase": {
          "type": "string"
        },
        "UPPERCASE": {
          "type": "string"
        },
        "huNGariAnCASE": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Company"
      },
      "type": "object"
    },
    "Props": {
      "properties": {
        "aaa": {
          "type": "string"
        },
        "bbb": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Props"
      },
      "type": "object"
    },
    "EntityRequest": {
      "properties": {
        "person": {
          "$ref": "#/definitions/Entity"
        }
      },
      "xml": {
        "name": "EntityRequest"
      },
      "type": "object"
    },
    "Entity": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "entityName": {
          "$ref": "#/definitions/EntityName"
        }
      },
      "xml": {
        "name": "Entity"
      },
      "type": "object"
    },
    "EntityName": {
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "EntityName"
      },
      "type": "object"
    },
    "CountingLock1": {
      "properties": {
        "EmployeeID": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "EmployeeName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "CountingLock1"
      },
      "type": "object"
    },
    "CountingLock2": {
      "properties": {
        "EmployeeID": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "EmployeeName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "CountingLock2"
      },
      "type": "object"
    },
    "NewUserWriteModel": {
      "properties": {
        "Uid": {
          "example": "00000000-0000-0000-0000-000000000000",
          "type": "string",
          "format": "uuid"
        },
        "Email": {
          "type": "string",
          "maxLength": 250,
          "minLength": 5,
          "pattern": "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
        },
        "Name": {
          "type": "string",
          "maxLength": 250
        }
      },
      "xml": {
        "name": "NewUserWriteModel"
      },
      "type": "object"
    },
    "KeyValuePair[Int32,ShiftDayOffRule]": {
      "properties": {
        "Key": {
          "readOnly": true,
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Value": {
          "readOnly": true,
          "example": {
            "None": 0,
            "OffAfter": 1,
            "InAfter": 3,
            "OffBefore": -1
          },
          "type": "string",
          "enum": [
            "None",
            "OffAfter",
            "OffBefore",
            "InAfter"
          ]
        }
      },
      "xml": {
        "name": "KeyValuePair`2"
      },
      "type": "object"
    },
    "CurrentTask": {
      "properties": {
        "Id": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Payload": {
          "type": "object"
        }
      },
      "xml": {
        "name": "CurrentTask"
      },
      "type": "object"
    },
    "Test": {
      "properties": {
        "id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "guid": {
          "example": "00000000-0000-0000-0000-000000000000",
          "type": "string",
          "format": "uuid"
        },
        "did": {
          "example": 9858.216,
          "type": "number",
          "format": "double"
        },
        "keys": {
          "items": {
            "type": "string"
          },
          "example": [
            "abc",
            "def",
            "ghi"
          ],
          "type": "array"
        },
        "index": {
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "example": {
            "1": "abc",
            "2": "def"
          },
          "type": "object"
        }
      },
      "xml": {
        "name": "Test"
      },
      "type": "object"
    },
    "ViewModelTest": {
      "description": "Testing POCO model",
      "properties": {
        "abd": {
          "example": "aaabbbddd",
          "type": "string"
        },
        "bcd": {
          "type": "string",
          "maxLength": 5,
          "minLength": 3
        },
        "cde": {
          "example": "cccdddeee",
          "type": "string"
        },
        "Id": {
          "description": "The super ID that will be used",
          "example": "123",
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "description": "Who needs a name?",
          "example": "John Doe",
          "type": "string"
        },
        "xyz": {
          "example": "xxxyyyzzz",
          "type": "string"
        }
      },
      "xml": {
        "name": "ViewModelTest"
      },
      "type": "object"
    },
    "MyData": {
      "description": "My super duper data",
      "properties": {
        "id": {
          "description": "The unique identifier",
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Everyone needs a name",
          "type": "string"
        },
        "details": {
          "description": "Details - testing anchor: <a href=\"?filter=TestPost\">TestPost</a>",
          "type": "string"
        }
      },
      "xml": {
        "name": "MyData"
      },
      "type": "object"
    },
    "NotFoundResult": {
      "properties": {
        "Request": {
          "readOnly": true,
          "type": "object"
        }
      },
      "xml": {
        "name": "NotFoundResult"
      },
      "type": "object"
    },
    "BadRequestErrorMessageResult": {
      "properties": {
        "Message": {
          "readOnly": true,
          "type": "string"
        },
        "ContentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "Request": {
          "readOnly": true,
          "type": "object"
        },
        "Formatters": {
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true,
          "xml": {
            "name": "MediaTypeFormatter",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "BadRequestErrorMessageResult"
      },
      "type": "object"
    },
    "IContentNegotiator": {
      "properties": {},
      "xml": {
        "name": "IContentNegotiator"
      },
      "type": "object"
    },
    "MediaTypeFormatter": {
      "properties": {
        "SupportedMediaTypes": {
          "items": {
            "$ref": "#/definitions/MediaTypeHeaderValue"
          },
          "readOnly": true,
          "xml": {
            "name": "MediaTypeHeaderValue",
            "wrapped": true
          },
          "type": "array"
        },
        "SupportedEncodings": {
          "items": {
            "$ref": "#/definitions/Encoding"
          },
          "readOnly": true,
          "xml": {
            "name": "Encoding",
            "wrapped": true
          },
          "type": "array"
        },
        "MediaTypeMappings": {
          "items": {
            "$ref": "#/definitions/MediaTypeMapping"
          },
          "readOnly": true,
          "xml": {
            "name": "MediaTypeMapping",
            "wrapped": true
          },
          "type": "array"
        },
        "RequiredMemberSelector": {
          "$ref": "#/definitions/IRequiredMemberSelector"
        }
      },
      "xml": {
        "name": "MediaTypeFormatter"
      },
      "type": "object"
    },
    "MediaTypeHeaderValue": {
      "properties": {
        "CharSet": {
          "type": "string"
        },
        "Parameters": {
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "readOnly": true,
          "xml": {
            "name": "NameValueHeaderValue",
            "wrapped": true
          },
          "type": "array"
        },
        "MediaType": {
          "type": "string"
        }
      },
      "xml": {
        "name": "MediaTypeHeaderValue"
      },
      "type": "object"
    },
    "Encoding": {
      "properties": {
        "BodyName": {
          "readOnly": true,
          "type": "string"
        },
        "EncodingName": {
          "readOnly": true,
          "type": "string"
        },
        "HeaderName": {
          "readOnly": true,
          "type": "string"
        },
        "WebName": {
          "readOnly": true,
          "type": "string"
        },
        "WindowsCodePage": {
          "readOnly": true,
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "IsBrowserDisplay": {
          "readOnly": true,
          "type": "boolean"
        },
        "IsBrowserSave": {
          "readOnly": true,
          "type": "boolean"
        },
        "IsMailNewsDisplay": {
          "readOnly": true,
          "type": "boolean"
        },
        "IsMailNewsSave": {
          "readOnly": true,
          "type": "boolean"
        },
        "IsSingleByte": {
          "readOnly": true,
          "type": "boolean"
        },
        "EncoderFallback": {
          "$ref": "#/definitions/EncoderFallback"
        },
        "DecoderFallback": {
          "$ref": "#/definitions/DecoderFallback"
        },
        "IsReadOnly": {
          "readOnly": true,
          "type": "boolean"
        },
        "CodePage": {
          "readOnly": true,
          "example": 123,
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "Encoding"
      },
      "type": "object"
    },
    "MediaTypeMapping": {
      "properties": {
        "MediaType": {
          "$ref": "#/definitions/MediaTypeHeaderValue",
          "readOnly": true
        }
      },
      "xml": {
        "name": "MediaTypeMapping"
      },
      "type": "object"
    },
    "IRequiredMemberSelector": {
      "properties": {},
      "xml": {
        "name": "IRequiredMemberSelector"
      },
      "type": "object"
    },
    "NameValueHeaderValue": {
      "properties": {
        "Name": {
          "readOnly": true,
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NameValueHeaderValue"
      },
      "type": "object"
    },
    "EncoderFallback": {
      "properties": {
        "MaxCharCount": {
          "readOnly": true,
          "example": 123,
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "EncoderFallback"
      },
      "type": "object"
    },
    "DecoderFallback": {
      "properties": {
        "MaxCharCount": {
          "readOnly": true,
          "example": 123,
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "DecoderFallback"
      },
      "type": "object"
    },
    "UnauthorizedResult": {
      "properties": {
        "Challenges": {
          "items": {
            "$ref": "#/definitions/AuthenticationHeaderValue"
          },
          "readOnly": true,
          "xml": {
            "name": "AuthenticationHeaderValue",
            "wrapped": true
          },
          "type": "array"
        },
        "Request": {
          "readOnly": true,
          "type": "object"
        }
      },
      "xml": {
        "name": "UnauthorizedResult"
      },
      "type": "object"
    },
    "AuthenticationHeaderValue": {
      "properties": {
        "Scheme": {
          "readOnly": true,
          "type": "string"
        },
        "Parameter": {
          "readOnly": true,
          "type": "string"
        }
      },
      "xml": {
        "name": "AuthenticationHeaderValue"
      },
      "type": "object"
    },
    "InternalServerErrorResult": {
      "properties": {
        "Request": {
          "readOnly": true,
          "type": "object"
        }
      },
      "xml": {
        "name": "InternalServerErrorResult"
      },
      "type": "object"
    },
    "Account": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "EntityId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "type": "string"
        },
        "Symbol": {
          "type": "string"
        },
        "Vat": {
          "type": "string"
        },
        "Street1": {
          "type": "string"
        },
        "Street2": {
          "type": "string"
        },
        "Street3": {
          "type": "string"
        },
        "PostalCode": {
          "type": "string"
        },
        "Region": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        },
        "Phone1": {
          "type": "string"
        },
        "Phone2": {
          "type": "string"
        },
        "Fax": {
          "type": "string"
        },
        "Email1": {
          "type": "string"
        },
        "Email2": {
          "type": "string"
        },
        "Website": {
          "type": "string"
        },
        "Contact": {
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "xml": {
            "name": "Contact",
            "wrapped": true
          },
          "type": "array"
        },
        "SupplyAgreement": {
          "items": {
            "$ref": "#/definitions/SupplyAgreement"
          },
          "xml": {
            "name": "SupplyAgreement",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "xml": {
        "name": "Account"
      },
      "type": "object"
    },
    "Contact": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "AccountId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "FirstName": {
          "type": "string"
        },
        "LastName": {
          "type": "string"
        },
        "JobTitle": {
          "type": "string"
        },
        "Email": {
          "type": "string"
        },
        "BusinessPhone": {
          "type": "string"
        },
        "MobilePhone": {
          "type": "string"
        },
        "Fax": {
          "type": "string"
        },
        "allOf": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/TheProps"
        },
        "properties2": {
          "$ref": "#/definitions/TheProps"
        },
        "Updated": {
          "example": "2018-04-18",
          "type": "string",
          "format": "date-time"
        },
        "Account": {
          "$ref": "#/definitions/Account"
        }
      },
      "xml": {
        "name": "Contact"
      },
      "type": "object"
    },
    "SupplyAgreement": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "EntityId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "AccountId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "type": "string"
        },
        "Slaid": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Account": {
          "$ref": "#/definitions/Account"
        }
      },
      "xml": {
        "name": "SupplyAgreement"
      },
      "type": "object"
    },
    "TheProps": {
      "properties": {
        "abc": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "bcd": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "def": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "TheProps"
      },
      "type": "object"
    },
    "ImageFeature": {
      "properties": {
        "ImageUrl": {
          "description": "Here goes your image URL",
          "type": "string"
        },
        "Title": {
          "description": "We all need a Title",
          "type": "string"
        }
      },
      "xml": {
        "name": "ImageFeature"
      },
      "type": "object"
    },
    "Int64Data": {
      "properties": {
        "MyLong": {
          "example": "1253261109769874438",
          "type": "integer",
          "format": "int64"
        },
        "MyInt64": {
          "example": "21474836470",
          "type": "integer",
          "format": "int64"
        },
        "MyData": {
          "example": "1253261109769874438",
          "type": "string"
        }
      },
      "xml": {
        "name": "Int64Data"
      },
      "type": "object"
    },
    "Payload": {
      "properties": {
        "Name": {
          "description": "Payload Name",
          "type": "string"
        },
        "Timeout": {
          "description": "Timeout in ms (Range 15000 to 60000. Default set to 50000)",
          "example": 123,
          "type": "integer",
          "format": "int32",
          "default": 50000,
          "maximum": 60000,
          "minimum": 15000
        }
      },
      "xml": {
        "name": "Payload"
      },
      "type": "object"
    },
    "GeolocateResponse": {
      "description": "Geolocation result",
      "properties": {
        "CountryName": {
          "description": "Country name of IP address",
          "type": "string"
        },
        "City": {
          "description": "City of IP address",
          "example": "Miami",
          "type": "string"
        },
        "RegionCode": {
          "description": "State/region code of IP address",
          "example": "FL",
          "type": "string"
        },
        "RegionName": {
          "description": "State/region of IP address",
          "example": "Florida",
          "type": "string"
        },
        "ZipCode": {
          "description": "Zip or postal code of IP address",
          "example": "33323",
          "type": "string"
        },
        "TimezoneStandardName": {
          "description": "Timezone of IP address",
          "type": "string"
        },
        "Latitude": {
          "description": "Latitude of IP address",
          "example": "25.85",
          "type": "number",
          "format": "double"
        },
        "Longitude": {
          "description": "Longitude of IP address",
          "example": "-80.27",
          "type": "number",
          "format": "double"
        },
        "BigErrorMargin": {
          "example": 9858.216,
          "type": "number",
          "format": "double",
          "maximum": 110.99,
          "minimum": 10.1
        },
        "CountryCode": {
          "description": "Two-letter country code of IP address",
          "type": "string"
        },
        "ErrorMargin": {
          "example": 9858.216,
          "type": "number",
          "format": "double",
          "maximum": 0.99,
          "minimum": 0.1
        }
      },
      "xml": {
        "name": "GeolocateResponse"
      },
      "type": "object"
    },
    "SomeRequest": {
      "properties": {
        "Point1": {
          "$ref": "#/definitions/Location"
        },
        "Point2": {
          "$ref": "#/definitions/Location"
        }
      },
      "xml": {
        "name": "SomeRequest"
      },
      "type": "object"
    },
    "Coordinate": {
      "properties": {
        "Elev": {
          "description": "**Elevation**: is the height above or below a fixed reference point.",
          "example": "2.6",
          "type": "number",
          "format": "float"
        },
        "Lat": {
          "description": "**Latitude**: a geographic coordinate that specifies the north–south position of a point on the Earth's surface.",
          "example": "25.85",
          "type": "number",
          "format": "float",
          "maximum": 90,
          "minimum": -90
        },
        "Lon": {
          "description": "**Longitude**: a geographic coordinate that specifies the east-west position of a point on the Earth's surface.",
          "example": "-80.27",
          "type": "number",
          "format": "float",
          "maximum": 180,
          "minimum": -180
        }
      },
      "xml": {
        "name": "Coordinate"
      },
      "type": "object"
    },
    "MData": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Month": {
          "type": "string",
          "enum": [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
          ]
        }
      },
      "xml": {
        "name": "MData"
      },
      "type": "object"
    },
    "InputData": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Date": {
          "example": "2018-04-18",
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "InputData"
      },
      "type": "object"
    },
    "PolygonVolumeInsideParameter": {
      "properties": {
        "Points": {
          "items": {
            "$ref": "#/definitions/Location"
          },
          "xml": {
            "name": "Location",
            "wrapped": true
          },
          "example": [
            {
              "Lat": 1.0,
              "Lon": 2.0
            },
            {
              "Lat": 5.0,
              "Lon": 6.0
            }
          ],
          "type": "array"
        },
        "PlanId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "PolygonVolumeInsideParameter"
      },
      "type": "object"
    },
    "CategoryModel": {
      "properties": {
        "Id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "Parent": {
          "$ref": "#/definitions/CategoryModel"
        }
      },
      "xml": {
        "name": "CategoryModel"
      },
      "type": "object"
    },
    "test1": {
      "properties": {
        "MyId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "example": "00000000-0000-0000-0000-000000000000",
          "type": "string",
          "format": "uuid"
        }
      },
      "xml": {
        "name": "test1"
      },
      "type": "object"
    },
    "test2": {
      "properties": {
        "MyId": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "example": "00000000-0000-0000-0000-000000000000",
          "type": "string",
          "format": "uuid"
        }
      },
      "xml": {
        "name": "test2"
      },
      "type": "object"
    },
    "BodyData": {
      "properties": {
        "date": {
          "$ref": "#/definitions/LocalDate"
        },
        "inputModel": {
          "$ref": "#/definitions/InputModel"
        }
      },
      "xml": {
        "name": "BodyData"
      },
      "type": "object"
    },
    "LocalDate": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "LocalDate"
      },
      "type": "object"
    },
    "InputModel": {
      "properties": {
        "id": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "InputModel"
      },
      "type": "object"
    },
    "DTOv2": {
      "properties": {
        "itemid": {
          "description": "Secret ID for your object",
          "example": "234",
          "type": "integer",
          "format": "int32",
          "default": 123
        },
        "note": {
          "description": "Notes about your object",
          "example": "MyNote",
          "type": "string",
          "default": "HelloWorld"
        }
      },
      "xml": {
        "name": "DTOv2"
      },
      "type": "object"
    },
    "MyTest": {
      "properties": {
        "Name": {
          "type": "string",
          "default": "HelloWorld",
          "maxLength": 250
        },
        "IsPassing": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "MyTest"
      },
      "type": "object"
    },
    "MyEndpointRequestClass": {
      "properties": {
        "StringEnumColor": {
          "type": "string",
          "pattern": "^(dark-blue|dark-red|light-blue|light-red)"
        },
        "Transparency": {
          "type": "string",
          "pattern": "^(high|medium|low)"
        },
        "Name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "MyEndpointRequestClass"
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "Name": {
          "type": "string"
        },
        "Age": {
          "example": 123,
          "type": "integer",
          "format": "int32"
        }
      },
      "xml": {
        "name": "User"
      },
      "type": "object"
    },
    "Company123": {
      "properties": {
        "Id": {
          "description": "The Unique Company ID",
          "example": "123",
          "type": "integer",
          "format": "int32",
          "default": 456
        },
        "Name": {
          "description": "The Company Name",
          "example": "Acme co",
          "type": "string",
          "default": "My Company"
        },
        "Description": {
          "description": "An optional description of the company",
          "example": "Super duper company",
          "type": "string"
        },
        "TaxCode": {
          "example": "42rty",
          "type": "string"
        },
        "TaxCodeDisplayName": {
          "example": "Tax Code Display",
          "type": "string"
        },
        "allOf": {
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/Props"
        },
        "lowercase": {
          "type": "string"
        },
        "UPPERCASE": {
          "type": "string"
        },
        "huNGariAnCASE": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Company"
      },
      "type": "object"
    },
    "Enums_Definitions": {
      "properties": {
        "ShiftDayOffRule": {
          "example": {
            "None": 0,
            "OffAfter": 1,
            "InAfter": 3,
            "OffBefore": -1
          }
        },
        "CustomEnum": {
          "example": {
            "Text": 1,
            "Numeric": 2,
            "Date": 4,
            "Numeric_Function": 8,
            "Dropdown_List": 16,
            "Checkbox": 32
          }
        },
        "MonthEnum": {
          "example": {
            "January": 0,
            "February": 1,
            "March": 2,
            "April": 3,
            "May": 4,
            "June": 5,
            "July": 6,
            "August": 7,
            "September": 8,
            "October": 9,
            "November": 10,
            "December": 11
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant",
      "flow": "accessCode",
      "authorizationUrl": "http://www.facebook.com/dialog/oauth/?client_id=183620338840937&redirect_uri=http%3A%2F%2Fswashbuckletest.azurewebsites.net%2Fswagger",
      "tokenUrl": "https://graph.facebook.com/oauth/access_token?client_id=183620338840937&redirect_uri=http%3A%2F%2Fswashbuckletest.azurewebsites.net%2Fswagger&client_secret=de81460e907d213dcc4271aa7b1ae88a&grant_type=client_credentials",
      "scopes": {}
    }
  },
  "tags": [
    {
      "name": "ApiExplorer"
    },
    {
      "name": "ArrayTest"
    },
    {
      "name": "Async"
    },
    {
      "name": "Attribute"
    },
    {
      "name": "BigString"
    },
    {
      "name": "BigSwag"
    },
    {
      "name": "Binding"
    },
    {
      "name": "Blob"
    },
    {
      "name": "ChildApi"
    },
    {
      "name": "Company"
    },
    {
      "name": "ComplexRequest"
    },
    {
      "name": "CountingLock"
    },
    {
      "name": "CustomEnumerable"
    },
    {
      "name": "Default"
    },
    {
      "name": "Definitions"
    },
    {
      "name": "Dictionary"
    },
    {
      "name": "EnumTest"
    },
    {
      "name": "FromBody"
    },
    {
      "name": "FromUri"
    },
    {
      "name": "HtmlExample"
    },
    {
      "name": "HugeResponse"
    },
    {
      "name": "IActionResult"
    },
    {
      "name": "IHttpActionResult"
    },
    {
      "name": "Image"
    },
    {
      "name": "ImportArray"
    },
    {
      "name": "InheritanceTest"
    },
    {
      "name": "Int64"
    },
    {
      "name": "IntParam"
    },
    {
      "name": "Location"
    },
    {
      "name": "Log"
    },
    {
      "name": "MemoryBarrier"
    },
    {
      "name": "MonthTest"
    },
    {
      "name": "MultiGet"
    },
    {
      "name": "MultiParamPost"
    },
    {
      "name": "NestedEnum"
    },
    {
      "name": "NestedSwag"
    },
    {
      "name": "NewUser"
    },
    {
      "name": "NodaTime"
    },
    {
      "name": "NumCalc"
    },
    {
      "name": "OAuth"
    },
    {
      "name": "PagedList"
    },
    {
      "name": "PngImage"
    },
    {
      "name": "PolygonVolume"
    },
    {
      "name": "RecursiveParam"
    },
    {
      "name": "RoutePrefix"
    },
    {
      "name": "Routes"
    },
    {
      "name": "RouteTest",
      "description": "Testing a controller with param in the Route"
    },
    {
      "name": "SvgImage"
    },
    {
      "name": "TestEnum",
      "description": "Testing enums ..."
    },
    {
      "name": "TestMultiGet"
    },
    {
      "name": "TestPost"
    },
    {
      "name": "TestStringEnum"
    },
    {
      "name": "Users"
    },
    {
      "name": "ValueProvider"
    },
    {
      "name": "ValueTuple"
    }
  ]
}